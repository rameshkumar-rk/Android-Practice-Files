/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ball;


 import java.util.Timer;
import java.util.TimerTask;
import javax.microedition.lcdui.Alert;
import javax.microedition.lcdui.AlertType;
import javax.microedition.lcdui.Canvas;
import javax.microedition.lcdui.Command;
import javax.microedition.lcdui.CommandListener;
import javax.microedition.lcdui.Display;
import javax.microedition.lcdui.Displayable;
import javax.microedition.lcdui.Graphics;
import javax.microedition.midlet.*;


public class Midlet extends MIDlet {
    Display d;
        MyCanvas m;
     Timer t;
    MyTask mt;
    int x=10,y=10;
    int xiner=1,yiner=1;
    Command start, stop;
     Command c;


    public void startApp() {
          d=Display.getDisplay(this);
       m= new MyCanvas();
       d.setCurrent(m);

    }

    class MyTask extends TimerTask
    {
        public void run()
        {
            m.repaint();
           
        }
    }
    class MyCanvas  extends Canvas implements CommandListener
      
    {
        MyCanvas()
        { start=new Command("start", Command.SCREEN,1);
        addCommand(start);
   stop=new Command("stop", Command.SCREEN,2);
        addCommand(stop);
       setCommandListener(this);}
     public void  paint(Graphics g)
        {  g.setColor(255,255,255);
              g.fillRect(0,0,getWidth(),getHeight());
              g.setColor(255,0,0);
                  
              x+=20*xiner;
              y+=50*yiner;
              if(x>getWidth()-20 || x<0 )
              { Alert alert = new Alert("Ball Hit","Ball Hit",null,AlertType.ALARM);
            alert.setTimeout(Alert.FOREVER);
            d.setCurrent(alert);
                  xiner*=-1;
                  }
              if(y>getHeight()-50||y<0)
              {
                  Alert alert = new Alert("Ball Hit","Ball Hit",null,AlertType.ALARM);
              alert.setTimeout(Alert.FOREVER);
            d.setCurrent(alert);
            yiner*=-1;
             
              }
            g.fillArc(x,y, 20,20,0,360);
       
    }
        public void commandAction(Command c, Displayable d) {
          //  throw new UnsupportedOperationException("Not supported yet.");
      if(c==start)
     {
      t=new Timer();
      mt=new MyTask();
      t.schedule(mt,1000,500);
           }
     else if(c==stop)
     {
          t.cancel();
          mt.cancel();
     }   }
    }
   
    public void pauseApp() {
    }
   
    public void destroyApp(boolean unconditional) {
    }

}









/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bar;



import javax.microedition.midlet.*;
import javax.microedition.lcdui.*;
public class Midlet extends MIDlet implements CommandListener{
public Form form;
public Command exitCommand;
public Command OkCommand;
public Command backCommand;
public Displayable d;
public Display display;
public TextField textfield1;
public TextField textfield2;
public TextField textfield3;
public TextField textfield4;
public TextField textfield5;
public Midlet()
{
display=Display.getDisplay(this);
form=new Form("BarGraph");
textfield1=new TextField("Percent placed in ECE     : ","",30,TextField.ANY);
textfield2=new TextField("Percent placed in CSE     : ","",30,TextField.ANY);
textfield3=new TextField("Percent placed in IT      : ","",30,TextField.ANY);
textfield4=new TextField("Percent placed in Mech    : ","",30,TextField.ANY);
textfield5=new TextField("Percent placed in Civil   : ","",30,TextField.ANY);
form.append(textfield1);
form.append(textfield2);
form.append(textfield3);
form.append(textfield4);
form.append(textfield5);
OkCommand=new Command("Ok",Command.OK,1);
exitCommand=new Command("Exit",Command.EXIT,1);
backCommand=new Command("Back",Command.BACK,1);
form.addCommand(OkCommand);
form.addCommand(exitCommand);
form.setCommandListener(this);
}
public void startApp() {
display.setCurrent(form);
}
public void pauseApp() {
}
public void destroyApp(boolean unconditional) {
}
public void commandAction(Command command,Displayable displayable)
{
if(displayable==form)
{
if(command==OkCommand)
{
    
int[] data=new int[5];


/*
data[0]=Integer.parseInt(textfield1.getString());
data[1]=Integer.parseInt(textfield2.getString());
data[2]=Integer.parseInt(textfield3.getString());
data[3]=Integer.parseInt(textfield4.getString());
data[4]=Integer.parseInt(textfield5.getString());
*/
data[0]=40;
data[1]=30;
data[2]=30;
data[3]=10;
data[4]=40;



d=new BarCanvas(data);
d.addCommand(backCommand);
d.setCommandListener(this);
display.setCurrent(d);
}
else if(command==exitCommand)
notifyDestroyed();
}
else if(displayable==d)
{
if(command==backCommand)
display.setCurrent(form);
}}}
class BarCanvas extends Canvas{

int[] data;
public int x;
public int y;
public int y1;
public int h;
static int red=100;
-static int blue=70;
-static int blue=70;
int index=0;
String hh="\t\t-----------Civil--------Mech ---------IT--------CSE------ECE";
String h1="----------------------ECE";
//String h1="                   ECE";
String hh2="CSE";
String h3="IT";

public BarCanvas(int[] data)
{
this.data=data;
x=10;
}
public void paint(Graphics g)
{
  
g.setColor(255, 255, 255);
g.fillRect(0, 0, this.getWidth(), this.getHeight());
g.setColor(red,green,blue);
int i=0;
y1=data[0];
h=200;
g.drawString(hh, x+90, y+15,Graphics.BASELINE| Graphics.HCENTER);
while(i<data.length)
{
    red+=30;
    green+=10;
    blue+=9;
y=data[i];
h=200+y1-y;

g.fillRect(x, y,25 , h);
g.setColor(red,green,blue);
x+=45;
i++;}} }


